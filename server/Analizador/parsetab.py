
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftIGUAL_IGUALNO_IGUALMENORMAYORMENOR_IGUALMAYOR_IGUALleftMASMENOSleftMULTIDIVMODULOrightUNARIOADMIRACION AND ARROW BOOL CADENA CARACTER CHAR COMA DECIMAL DIV DOS_PT ELSE ENTERO F64 FALSE GUION_B I64 ID IF IGUAL IGUAL_IGUAL LET LLAVA LLAVC MAS MATCH MAYOR MAYOR_IGUAL MENOR MENOR_IGUAL MENOS MODULO MULTI MUT NOT NO_IGUAL OR PARA PARC POW PRINTLN PT_COMA PUNTO SEP_MATCH STR STRING TO_OWNED TO_STRING TRUE\n    inicio : instrucciones\n    \n    instrucciones : instrucciones instruccion\n    \n    instrucciones : instruccion\n    \n    instruccion : prints PT_COMA\n                | declaracion PT_COMA\n                | sent_if\n                | match\n    \n    prints : PRINTLN ADMIRACION PARA CADENA COMA list_exp PARC\n    \n    prints : PRINTLN ADMIRACION PARA CADENA PARC\n    \n    list_exp : list_exp COMA expresion\n    \n    list_exp : expresion\n    \n    declaracion : LET MUT ID DOS_PT tipo IGUAL expresion\n    \n    declaracion : LET MUT ID DOS_PT tipo\n    \n    declaracion : LET MUT ID IGUAL expresion\n    \n    declaracion : LET MUT ID\n    \n    declaracion : LET ID DOS_PT tipo IGUAL expresion\n    \n    declaracion : LET ID DOS_PT tipo\n    \n    declaracion : LET ID IGUAL expresion\n    \n    declaracion : LET ID\n    \n    declaracion : ID IGUAL expresion\n    \n    sent_if : IF expresion statement sent_else\n    \n    sent_else : ELSE statement\n            | ELSE sent_if\n    \n    sent_else : \n    \n    match : MATCH expresion casos_match\n    \n    casos_match : LLAVA lista_casos default LLAVC\n    \n    lista_casos : lista_casos lista_expresiones ARROW statement COMA\n                | lista_casos lista_expresiones ARROW instruccion COMA\n    \n    lista_casos : lista_expresiones ARROW statement COMA\n                | lista_expresiones ARROW instruccion COMA\n    \n    lista_expresiones : lista_expresiones SEP_MATCH expresion\n    \n    lista_expresiones : expresion\n    \n    default : GUION_B ARROW statement COMA\n            | GUION_B ARROW instruccion COMA\n    \n    statement : LLAVA instrucciones LLAVC\n    \n    statement : LLAVA LLAVC\n    \n    tipo : I64\n        | F64\n        | BOOL\n        | STRING\n        | STR\n        | CHAR\n    \n    expresion : expresion MAS expresion\n           | expresion MENOS expresion\n           | expresion MULTI expresion\n           | expresion DIV expresion\n           | expresion MODULO expresion\n    \n    expresion : I64 DOS_PT DOS_PT POW PARA expresion COMA expresion PARC\n    \n    expresion : PARA expresion PARC\n    \n    expresion : MENOS expresion %prec UNARIO\n    \n    expresion : expresion IGUAL_IGUAL expresion\n            | expresion NO_IGUAL expresion\n            | expresion MAYOR expresion\n            | expresion MENOR expresion\n            | expresion MAYOR_IGUAL expresion\n            | expresion MENOR_IGUAL expresion\n    \n    expresion : expresion AND expresion\n            | expresion OR expresion\n    \n    expresion : NOT expresion\n    \n    expresion : expresion PUNTO TO_OWNED PARA PARC\n    \n    expresion : expresion PUNTO TO_STRING PARA PARC\n    \n    expresion :  ENTERO\n    \n    expresion : DECIMAL\n    \n    expresion : CARACTER\n    \n    expresion : CADENA\n    \n    expresion : TRUE\n            | FALSE\n    \n    expresion : ID\n    '
    
_lr_action_items = {'PRINTLN':([0,2,3,6,7,13,14,15,38,53,58,71,88,89,100,101,104,109,118,119,120,],[8,8,-3,-6,-7,-2,-4,-5,-24,8,-25,-21,8,-36,-22,-23,-35,8,-26,8,8,]),'LET':([0,2,3,6,7,13,14,15,38,53,58,71,88,89,100,101,104,109,118,119,120,],[9,9,-3,-6,-7,-2,-4,-5,-24,9,-25,-21,9,-36,-22,-23,-35,9,-26,9,9,]),'ID':([0,2,3,6,7,9,11,12,13,14,15,17,19,21,23,24,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,58,59,62,71,88,89,92,95,99,100,101,104,109,110,113,117,118,119,120,124,132,133,135,136,137,],[10,10,-3,-6,-7,18,31,31,-2,-4,-5,34,31,31,31,31,31,-24,31,31,31,31,31,31,31,31,31,31,31,31,31,10,-25,31,31,-21,10,-36,31,31,31,-22,-23,-35,10,31,31,31,-26,10,10,31,-29,-30,31,-27,-28,]),'IF':([0,2,3,6,7,13,14,15,38,53,58,71,72,88,89,100,101,104,109,118,119,120,],[11,11,-3,-6,-7,-2,-4,-5,-24,11,-25,-21,11,11,-36,-22,-23,-35,11,-26,11,11,]),'MATCH':([0,2,3,6,7,13,14,15,38,53,58,71,88,89,100,101,104,109,118,119,120,],[12,12,-3,-6,-7,-2,-4,-5,-24,12,-25,-21,12,-36,-22,-23,-35,12,-26,12,12,]),'$end':([1,2,3,6,7,13,14,15,38,58,71,89,100,101,104,118,],[0,-1,-3,-6,-7,-2,-4,-5,-24,-25,-21,-36,-22,-23,-35,-26,]),'LLAVC':([3,6,7,13,14,15,38,53,58,71,88,89,100,101,104,106,118,138,139,],[-3,-6,-7,-2,-4,-5,-24,89,-25,-21,104,-36,-22,-23,-35,118,-26,-33,-34,]),'PT_COMA':([4,5,18,25,26,27,28,29,30,31,34,37,54,57,63,64,65,66,67,68,69,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,96,97,98,114,115,116,125,126,141,],[14,15,-19,-62,-63,-64,-65,-66,-67,-68,-15,-20,-50,-59,-17,-37,-38,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,-9,-13,-14,-16,-60,-61,-8,-12,-48,]),'COMA':([6,7,14,15,25,26,27,28,29,30,31,38,54,57,58,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,89,91,100,101,104,111,112,115,116,118,121,122,127,128,129,130,131,134,141,],[-6,-7,-4,-5,-62,-63,-64,-65,-66,-67,-68,-24,-50,-59,-25,95,-21,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-36,-49,-22,-23,-35,124,-11,-60,-61,-26,132,133,135,136,137,138,139,-10,-48,]),'ADMIRACION':([8,],[16,]),'MUT':([9,],[17,]),'IGUAL':([10,18,34,63,64,65,66,67,68,69,97,],[19,36,62,99,-37,-38,-39,-40,-41,-42,113,]),'I64':([11,12,19,21,23,24,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,61,62,92,95,99,110,113,117,124,132,133,135,136,137,],[22,22,22,22,22,22,64,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,64,22,22,22,22,22,22,22,22,-29,-30,22,-27,-28,]),'PARA':([11,12,16,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,86,87,92,95,99,105,110,113,117,124,132,133,135,136,137,],[23,23,33,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,102,103,23,23,23,117,23,23,23,23,-29,-30,23,-27,-28,]),'MENOS':([11,12,19,20,21,23,24,25,26,27,28,29,30,31,32,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,54,56,57,59,62,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,94,95,98,99,110,112,113,114,115,116,117,123,124,126,127,132,133,134,135,136,137,140,141,],[21,21,21,40,21,21,21,-62,-63,-64,-65,-66,-67,-68,40,21,40,21,21,21,21,21,21,21,21,21,21,21,21,21,-50,40,40,21,21,40,-43,-44,-45,-46,-47,40,40,40,40,40,40,40,40,-49,21,40,21,40,21,21,40,21,40,-60,-61,21,40,21,40,40,-29,-30,40,21,-27,-28,40,-48,]),'NOT':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-29,-30,24,-27,-28,]),'ENTERO':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-29,-30,25,-27,-28,]),'DECIMAL':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-29,-30,26,-27,-28,]),'CARACTER':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-29,-30,27,-27,-28,]),'CADENA':([11,12,19,21,23,24,33,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[28,28,28,28,28,28,60,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-29,-30,28,-27,-28,]),'TRUE':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-29,-30,29,-27,-28,]),'FALSE':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,132,133,135,136,137,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-29,-30,30,-27,-28,]),'DOS_PT':([18,22,34,55,],[35,55,61,90,]),'MAS':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[39,-62,-63,-64,-65,-66,-67,-68,39,39,-50,39,39,39,-43,-44,-45,-46,-47,39,39,39,39,39,39,39,39,-49,39,39,39,39,-60,-61,39,39,39,39,39,-48,]),'MULTI':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[41,-62,-63,-64,-65,-66,-67,-68,41,41,-50,41,41,41,41,41,-45,-46,-47,41,41,41,41,41,41,41,41,-49,41,41,41,41,-60,-61,41,41,41,41,41,-48,]),'DIV':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[42,-62,-63,-64,-65,-66,-67,-68,42,42,-50,42,42,42,42,42,-45,-46,-47,42,42,42,42,42,42,42,42,-49,42,42,42,42,-60,-61,42,42,42,42,42,-48,]),'MODULO':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[43,-62,-63,-64,-65,-66,-67,-68,43,43,-50,43,43,43,43,43,-45,-46,-47,43,43,43,43,43,43,43,43,-49,43,43,43,43,-60,-61,43,43,43,43,43,-48,]),'IGUAL_IGUAL':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[44,-62,-63,-64,-65,-66,-67,-68,44,44,-50,44,44,44,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,44,44,-49,44,44,44,44,-60,-61,44,44,44,44,44,-48,]),'NO_IGUAL':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[45,-62,-63,-64,-65,-66,-67,-68,45,45,-50,45,45,45,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,45,45,-49,45,45,45,45,-60,-61,45,45,45,45,45,-48,]),'MAYOR':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[46,-62,-63,-64,-65,-66,-67,-68,46,46,-50,46,46,46,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,46,46,-49,46,46,46,46,-60,-61,46,46,46,46,46,-48,]),'MENOR':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[47,-62,-63,-64,-65,-66,-67,-68,47,47,-50,47,47,47,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,47,47,-49,47,47,47,47,-60,-61,47,47,47,47,47,-48,]),'MAYOR_IGUAL':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[48,-62,-63,-64,-65,-66,-67,-68,48,48,-50,48,48,48,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,48,48,-49,48,48,48,48,-60,-61,48,48,48,48,48,-48,]),'MENOR_IGUAL':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[49,-62,-63,-64,-65,-66,-67,-68,49,49,-50,49,49,49,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,49,49,-49,49,49,49,49,-60,-61,49,49,49,49,49,-48,]),'AND':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[50,-62,-63,-64,-65,-66,-67,-68,50,50,-50,50,-59,50,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,50,-49,50,50,50,50,-60,-61,50,50,50,50,50,-48,]),'OR':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[51,-62,-63,-64,-65,-66,-67,-68,51,51,-50,51,-59,51,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,51,51,51,51,-60,-61,51,51,51,51,51,-48,]),'PUNTO':([20,25,26,27,28,29,30,31,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,98,112,114,115,116,123,126,127,134,140,141,],[52,-62,-63,-64,-65,-66,-67,-68,52,52,-50,52,-59,52,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,52,52,52,52,-60,-61,52,52,52,52,52,-48,]),'LLAVA':([20,25,26,27,28,29,30,31,32,54,57,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,109,115,116,119,120,141,],[53,-62,-63,-64,-65,-66,-67,-68,59,-50,-59,53,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,53,-60,-61,53,53,-48,]),'PARC':([25,26,27,28,29,30,31,54,56,57,60,73,74,75,76,77,78,79,80,81,82,83,84,85,91,102,103,111,112,115,116,134,140,141,],[-62,-63,-64,-65,-66,-67,-68,-50,91,-59,96,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,115,116,125,-11,-60,-61,-10,141,-48,]),'ARROW':([25,26,27,28,29,30,31,54,57,73,74,75,76,77,78,79,80,81,82,83,84,85,91,93,94,107,108,115,116,123,141,],[-62,-63,-64,-65,-66,-67,-68,-50,-59,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,109,-32,119,120,-60,-61,-31,-48,]),'SEP_MATCH':([25,26,27,28,29,30,31,54,57,73,74,75,76,77,78,79,80,81,82,83,84,85,91,93,94,107,115,116,123,141,],[-62,-63,-64,-65,-66,-67,-68,-50,-59,-43,-44,-45,-46,-47,-51,-52,-53,-54,-55,-56,-57,-58,-49,110,-32,110,-60,-61,-31,-48,]),'F64':([35,61,],[65,65,]),'BOOL':([35,61,],[66,66,]),'STRING':([35,61,],[67,67,]),'STR':([35,61,],[68,68,]),'CHAR':([35,61,],[69,69,]),'ELSE':([38,89,104,],[72,-36,-35,]),'TO_OWNED':([52,],[86,]),'TO_STRING':([52,],[87,]),'POW':([90,],[105,]),'GUION_B':([92,132,133,136,137,],[108,-29,-30,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'instrucciones':([0,53,],[2,88,]),'instruccion':([0,2,53,88,109,119,120,],[3,13,3,13,122,129,131,]),'prints':([0,2,53,88,109,119,120,],[4,4,4,4,4,4,4,]),'declaracion':([0,2,53,88,109,119,120,],[5,5,5,5,5,5,5,]),'sent_if':([0,2,53,72,88,109,119,120,],[6,6,6,101,6,6,6,6,]),'match':([0,2,53,88,109,119,120,],[7,7,7,7,7,7,7,]),'expresion':([11,12,19,21,23,24,36,39,40,41,42,43,44,45,46,47,48,49,50,51,59,62,92,95,99,110,113,117,124,135,],[20,32,37,54,56,57,70,73,74,75,76,77,78,79,80,81,82,83,84,85,94,98,94,112,114,123,126,127,134,140,]),'statement':([20,72,109,119,120,],[38,100,121,128,130,]),'casos_match':([32,],[58,]),'tipo':([35,61,],[63,97,]),'sent_else':([38,],[71,]),'lista_casos':([59,],[92,]),'lista_expresiones':([59,92,],[93,107,]),'default':([92,],[106,]),'list_exp':([95,],[111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> instrucciones','inicio',1,'p_inicio','parser.py',95),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_lista_instrucciones','parser.py',101),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','parser.py',108),
  ('instruccion -> prints PT_COMA','instruccion',2,'p_instruccion','parser.py',114),
  ('instruccion -> declaracion PT_COMA','instruccion',2,'p_instruccion','parser.py',115),
  ('instruccion -> sent_if','instruccion',1,'p_instruccion','parser.py',116),
  ('instruccion -> match','instruccion',1,'p_instruccion','parser.py',117),
  ('prints -> PRINTLN ADMIRACION PARA CADENA COMA list_exp PARC','prints',7,'p_instruccion_println','parser.py',124),
  ('prints -> PRINTLN ADMIRACION PARA CADENA PARC','prints',5,'p_instruccion_println_cads','parser.py',130),
  ('list_exp -> list_exp COMA expresion','list_exp',3,'p_println_listexp','parser.py',136),
  ('list_exp -> expresion','list_exp',1,'p_println_listexp_exit','parser.py',143),
  ('declaracion -> LET MUT ID DOS_PT tipo IGUAL expresion','declaracion',7,'p_instruccion_declaracion','parser.py',151),
  ('declaracion -> LET MUT ID DOS_PT tipo','declaracion',5,'p_declaracion_2','parser.py',164),
  ('declaracion -> LET MUT ID IGUAL expresion','declaracion',5,'p_declaracion_3','parser.py',177),
  ('declaracion -> LET MUT ID','declaracion',3,'p_declaracion_4','parser.py',190),
  ('declaracion -> LET ID DOS_PT tipo IGUAL expresion','declaracion',6,'p_declaracion_5','parser.py',203),
  ('declaracion -> LET ID DOS_PT tipo','declaracion',4,'p_declaracion_6','parser.py',216),
  ('declaracion -> LET ID IGUAL expresion','declaracion',4,'p_declaracion_7','parser.py',229),
  ('declaracion -> LET ID','declaracion',2,'p_declaracion_8','parser.py',242),
  ('declaracion -> ID IGUAL expresion','declaracion',3,'p__declaracion_asignacion','parser.py',255),
  ('sent_if -> IF expresion statement sent_else','sent_if',4,'p_instruccion_sent_if','parser.py',270),
  ('sent_else -> ELSE statement','sent_else',2,'p_sent_else','parser.py',276),
  ('sent_else -> ELSE sent_if','sent_else',2,'p_sent_else','parser.py',277),
  ('sent_else -> <empty>','sent_else',0,'p_sent_else_vacio','parser.py',283),
  ('match -> MATCH expresion casos_match','match',3,'p_instruccion_match','parser.py',292),
  ('casos_match -> LLAVA lista_casos default LLAVC','casos_match',4,'p_match_casos','parser.py',298),
  ('lista_casos -> lista_casos lista_expresiones ARROW statement COMA','lista_casos',5,'p_match_lista_casos','parser.py',305),
  ('lista_casos -> lista_casos lista_expresiones ARROW instruccion COMA','lista_casos',5,'p_match_lista_casos','parser.py',306),
  ('lista_casos -> lista_expresiones ARROW statement COMA','lista_casos',4,'p_match_lista_casos_salida','parser.py',313),
  ('lista_casos -> lista_expresiones ARROW instruccion COMA','lista_casos',4,'p_match_lista_casos_salida','parser.py',314),
  ('lista_expresiones -> lista_expresiones SEP_MATCH expresion','lista_expresiones',3,'p_match_lista_expresiones','parser.py',320),
  ('lista_expresiones -> expresion','lista_expresiones',1,'p_match_lista_expresiones2','parser.py',327),
  ('default -> GUION_B ARROW statement COMA','default',4,'p_match_default','parser.py',333),
  ('default -> GUION_B ARROW instruccion COMA','default',4,'p_match_default','parser.py',334),
  ('statement -> LLAVA instrucciones LLAVC','statement',3,'p_statement','parser.py',341),
  ('statement -> LLAVA LLAVC','statement',2,'p_statement_vacio','parser.py',347),
  ('tipo -> I64','tipo',1,'p_tipo','parser.py',353),
  ('tipo -> F64','tipo',1,'p_tipo','parser.py',354),
  ('tipo -> BOOL','tipo',1,'p_tipo','parser.py',355),
  ('tipo -> STRING','tipo',1,'p_tipo','parser.py',356),
  ('tipo -> STR','tipo',1,'p_tipo','parser.py',357),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',358),
  ('expresion -> expresion MAS expresion','expresion',3,'p_exp_aritmeticas','parser.py',374),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_exp_aritmeticas','parser.py',375),
  ('expresion -> expresion MULTI expresion','expresion',3,'p_exp_aritmeticas','parser.py',376),
  ('expresion -> expresion DIV expresion','expresion',3,'p_exp_aritmeticas','parser.py',377),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_exp_aritmeticas','parser.py',378),
  ('expresion -> I64 DOS_PT DOS_PT POW PARA expresion COMA expresion PARC','expresion',9,'p_exp_potencia','parser.py',384),
  ('expresion -> PARA expresion PARC','expresion',3,'p_exp_parentesis','parser.py',390),
  ('expresion -> MENOS expresion','expresion',2,'p_exp_unario','parser.py',397),
  ('expresion -> expresion IGUAL_IGUAL expresion','expresion',3,'p_exp_relacionales','parser.py',406),
  ('expresion -> expresion NO_IGUAL expresion','expresion',3,'p_exp_relacionales','parser.py',407),
  ('expresion -> expresion MAYOR expresion','expresion',3,'p_exp_relacionales','parser.py',408),
  ('expresion -> expresion MENOR expresion','expresion',3,'p_exp_relacionales','parser.py',409),
  ('expresion -> expresion MAYOR_IGUAL expresion','expresion',3,'p_exp_relacionales','parser.py',410),
  ('expresion -> expresion MENOR_IGUAL expresion','expresion',3,'p_exp_relacionales','parser.py',411),
  ('expresion -> expresion AND expresion','expresion',3,'p_exp_logicas','parser.py',419),
  ('expresion -> expresion OR expresion','expresion',3,'p_exp_logicas','parser.py',420),
  ('expresion -> NOT expresion','expresion',2,'p_exp_not','parser.py',426),
  ('expresion -> expresion PUNTO TO_OWNED PARA PARC','expresion',5,'p_exp_cadena_toowned','parser.py',434),
  ('expresion -> expresion PUNTO TO_STRING PARA PARC','expresion',5,'p_exp_cadena_tostring','parser.py',440),
  ('expresion -> ENTERO','expresion',1,'p_exp_entero','parser.py',447),
  ('expresion -> DECIMAL','expresion',1,'p_exp_decimal','parser.py',453),
  ('expresion -> CARACTER','expresion',1,'p_exp_caracter','parser.py',459),
  ('expresion -> CADENA','expresion',1,'p_exp_cadena_pointer','parser.py',465),
  ('expresion -> TRUE','expresion',1,'p_exp_booleano','parser.py',471),
  ('expresion -> FALSE','expresion',1,'p_exp_booleano','parser.py',472),
  ('expresion -> ID','expresion',1,'p_exp_identificador','parser.py',481),
]
